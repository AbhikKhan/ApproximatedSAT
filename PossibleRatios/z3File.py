from z3 import *

s = Optimize()

# Variable declaration
A_4_5_r1 = Int("A_4_5_r1")
A_4_5_r4 = Int("A_4_5_r4")
A_4_5_r3 = Int("A_4_5_r3")
A_3_5_r1 = Int("A_3_5_r1")
A_3_5_r4 = Int("A_3_5_r4")
A_3_5_r3 = Int("A_3_5_r3")
A_3_6_r1 = Int("A_3_6_r1")
A_3_6_r4 = Int("A_3_6_r4")
A_3_6_r3 = Int("A_3_6_r3")
A_4_6_r1 = Int("A_4_6_r1")
A_4_6_r4 = Int("A_4_6_r4")
A_4_6_r3 = Int("A_4_6_r3")

V_r1 = Int("V_r1")
V_r4 = Int("V_r4")
V_r3 = Int("V_r3")

d_0_r1  = Int("d_0_r1")
d_0_r4  = Int("d_0_r4")
d_0_r3  = Int("d_0_r3")
d_1_r1  = Int("d_1_r1")
d_1_r4  = Int("d_1_r4")
d_1_r3  = Int("d_1_r3")
d_2_r1  = Int("d_2_r1")
d_2_r4  = Int("d_2_r4")
d_2_r3  = Int("d_2_r3")

d_4_5_0_r1 = Int("d_4_5_0_r1")
d_4_5_1_r1 = Int("d_4_5_1_r1")
d_4_5_2_r1 = Int("d_4_5_2_r1")
d_4_5_0_r4 = Int("d_4_5_0_r4")
d_4_5_1_r4 = Int("d_4_5_1_r4")
d_4_5_2_r4 = Int("d_4_5_2_r4")
d_4_5_0_r3 = Int("d_4_5_0_r3")
d_4_5_1_r3 = Int("d_4_5_1_r3")
d_4_5_2_r3 = Int("d_4_5_2_r3")
d_3_5_0_r1 = Int("d_3_5_0_r1")
d_3_5_1_r1 = Int("d_3_5_1_r1")
d_3_5_2_r1 = Int("d_3_5_2_r1")
d_3_5_0_r4 = Int("d_3_5_0_r4")
d_3_5_1_r4 = Int("d_3_5_1_r4")
d_3_5_2_r4 = Int("d_3_5_2_r4")
d_3_5_0_r3 = Int("d_3_5_0_r3")
d_3_5_1_r3 = Int("d_3_5_1_r3")
d_3_5_2_r3 = Int("d_3_5_2_r3")
d_3_6_0_r1 = Int("d_3_6_0_r1")
d_3_6_1_r1 = Int("d_3_6_1_r1")
d_3_6_2_r1 = Int("d_3_6_2_r1")
d_3_6_0_r4 = Int("d_3_6_0_r4")
d_3_6_1_r4 = Int("d_3_6_1_r4")
d_3_6_2_r4 = Int("d_3_6_2_r4")
d_3_6_0_r3 = Int("d_3_6_0_r3")
d_3_6_1_r3 = Int("d_3_6_1_r3")
d_3_6_2_r3 = Int("d_3_6_2_r3")
d_4_6_0_r1 = Int("d_4_6_0_r1")
d_4_6_1_r1 = Int("d_4_6_1_r1")
d_4_6_2_r1 = Int("d_4_6_2_r1")
d_4_6_0_r4 = Int("d_4_6_0_r4")
d_4_6_1_r4 = Int("d_4_6_1_r4")
d_4_6_2_r4 = Int("d_4_6_2_r4")
d_4_6_0_r3 = Int("d_4_6_0_r3")
d_4_6_1_r3 = Int("d_4_6_1_r3")
d_4_6_2_r3 = Int("d_4_6_2_r3")

# Number of cells in the mixture filled with Rt reagent
s.add(And(A_4_5_r1>=0, A_4_5_r1<=1, A_4_5_r4>=0, A_4_5_r4<=1, A_4_5_r3>=0, A_4_5_r3<=1))
s.add(And(A_3_5_r1>=0, A_3_5_r1<=1, A_3_5_r4>=0, A_3_5_r4<=1, A_3_5_r3>=0, A_3_5_r3<=1))
s.add(And(A_3_6_r1>=0, A_3_6_r1<=1, A_3_6_r4>=0, A_3_6_r4<=1, A_3_6_r3>=0, A_3_6_r3<=1))
s.add(And(A_4_6_r1>=0, A_4_6_r1<=1, A_4_6_r4>=0, A_4_6_r4<=1, A_4_6_r3>=0, A_4_6_r3<=1))

s.add(A_4_5_r1 + A_3_5_r1 + A_3_6_r1 + A_4_6_r1 == V_r1)
s.add(A_4_5_r4 + A_3_5_r4 + A_3_6_r4 + A_4_6_r4 == V_r4)
s.add(A_4_5_r3 + A_3_5_r3 + A_3_6_r3 + A_4_6_r3 == V_r3)

# If a cell is filled with reagent Rt then no reagent Rk where k != t can be filled in that cell.
s.add(A_4_5_r1 + A_4_5_r4 + A_4_5_r3 == 1)
s.add(A_3_5_r1 + A_3_5_r4 + A_3_5_r3 == 1)
s.add(A_3_6_r1 + A_3_6_r4 + A_3_6_r3 == 1)
s.add(A_4_6_r1 + A_4_6_r4 + A_4_6_r3 == 1)

# To get traceability and connectivity.
s.add(If(And(A_4_5_r1 == 1, A_3_5_r1 + A_4_6_r1 == 0), (d_4_5_0_r1 == 1), (d_4_5_0_r1 == 0)))
s.add(If(And(A_3_5_r1 == 1, A_3_6_r1 + A_4_5_r1 == 0), (d_3_5_0_r1 == 1), (d_3_5_0_r1 == 0)))
s.add(If(And(A_3_6_r1 == 1, A_4_6_r1 + A_3_5_r1 == 0), (d_3_6_0_r1 == 1), (d_3_6_0_r1 == 0)))
s.add(If(And(A_4_6_r1 == 1, A_3_6_r1 + A_4_5_r1 == 0), (d_4_6_0_r1 == 1), (d_4_6_0_r1 == 0)))
s.add(If(And(A_4_5_r4 == 1, A_3_5_r4 + A_4_6_r4 == 0), (d_4_5_0_r4 == 1), (d_4_5_0_r4 == 0)))
s.add(If(And(A_3_5_r4 == 1, A_3_6_r4 + A_4_5_r4 == 0), (d_3_5_0_r4 == 1), (d_3_5_0_r4 == 0)))
s.add(If(And(A_3_6_r4 == 1, A_4_6_r4 + A_3_5_r4 == 0), (d_3_6_0_r4 == 1), (d_3_6_0_r4 == 0)))
s.add(If(And(A_4_6_r4 == 1, A_3_6_r4 + A_4_5_r4 == 0), (d_4_6_0_r4 == 1), (d_4_6_0_r4 == 0)))
s.add(If(And(A_4_5_r3 == 1, A_3_5_r3 + A_4_6_r3 == 0), (d_4_5_0_r3 == 1), (d_4_5_0_r3 == 0)))
s.add(If(And(A_3_5_r3 == 1, A_3_6_r3 + A_4_5_r3 == 0), (d_3_5_0_r3 == 1), (d_3_5_0_r3 == 0)))
s.add(If(And(A_3_6_r3 == 1, A_4_6_r3 + A_3_5_r3 == 0), (d_3_6_0_r3 == 1), (d_3_6_0_r3 == 0)))
s.add(If(And(A_4_6_r3 == 1, A_3_6_r3 + A_4_5_r3 == 0), (d_4_6_0_r3 == 1), (d_4_6_0_r3 == 0)))
s.add(If(And(A_4_5_r1 == 1, A_3_5_r1 + A_4_6_r1 == 1), (d_4_5_1_r1 == 1), (d_4_5_1_r1 == 0)))
s.add(If(And(A_3_5_r1 == 1, A_3_6_r1 + A_4_5_r1 == 1), (d_3_5_1_r1 == 1), (d_3_5_1_r1 == 0)))
s.add(If(And(A_3_6_r1 == 1, A_4_6_r1 + A_3_5_r1 == 1), (d_3_6_1_r1 == 1), (d_3_6_1_r1 == 0)))
s.add(If(And(A_4_6_r1 == 1, A_3_6_r1 + A_4_5_r1 == 1), (d_4_6_1_r1 == 1), (d_4_6_1_r1 == 0)))
s.add(If(And(A_4_5_r4 == 1, A_3_5_r4 + A_4_6_r4 == 1), (d_4_5_1_r4 == 1), (d_4_5_1_r4 == 0)))
s.add(If(And(A_3_5_r4 == 1, A_3_6_r4 + A_4_5_r4 == 1), (d_3_5_1_r4 == 1), (d_3_5_1_r4 == 0)))
s.add(If(And(A_3_6_r4 == 1, A_4_6_r4 + A_3_5_r4 == 1), (d_3_6_1_r4 == 1), (d_3_6_1_r4 == 0)))
s.add(If(And(A_4_6_r4 == 1, A_3_6_r4 + A_4_5_r4 == 1), (d_4_6_1_r4 == 1), (d_4_6_1_r4 == 0)))
s.add(If(And(A_4_5_r3 == 1, A_3_5_r3 + A_4_6_r3 == 1), (d_4_5_1_r3 == 1), (d_4_5_1_r3 == 0)))
s.add(If(And(A_3_5_r3 == 1, A_3_6_r3 + A_4_5_r3 == 1), (d_3_5_1_r3 == 1), (d_3_5_1_r3 == 0)))
s.add(If(And(A_3_6_r3 == 1, A_4_6_r3 + A_3_5_r3 == 1), (d_3_6_1_r3 == 1), (d_3_6_1_r3 == 0)))
s.add(If(And(A_4_6_r3 == 1, A_3_6_r3 + A_4_5_r3 == 1), (d_4_6_1_r3 == 1), (d_4_6_1_r3 == 0)))
s.add(If(And(A_4_5_r1 == 1, A_3_5_r1 + A_4_6_r1 == 2), (d_4_5_2_r1 == 1), (d_4_5_2_r1 == 0)))
s.add(If(And(A_3_5_r1 == 1, A_3_6_r1 + A_4_5_r1 == 2), (d_3_5_2_r1 == 1), (d_3_5_2_r1 == 0)))
s.add(If(And(A_3_6_r1 == 1, A_4_6_r1 + A_3_5_r1 == 2), (d_3_6_2_r1 == 1), (d_3_6_2_r1 == 0)))
s.add(If(And(A_4_6_r1 == 1, A_3_6_r1 + A_4_5_r1 == 2), (d_4_6_2_r1 == 1), (d_4_6_2_r1 == 0)))
s.add(If(And(A_4_5_r4 == 1, A_3_5_r4 + A_4_6_r4 == 2), (d_4_5_2_r4 == 1), (d_4_5_2_r4 == 0)))
s.add(If(And(A_3_5_r4 == 1, A_3_6_r4 + A_4_5_r4 == 2), (d_3_5_2_r4 == 1), (d_3_5_2_r4 == 0)))
s.add(If(And(A_3_6_r4 == 1, A_4_6_r4 + A_3_5_r4 == 2), (d_3_6_2_r4 == 1), (d_3_6_2_r4 == 0)))
s.add(If(And(A_4_6_r4 == 1, A_3_6_r4 + A_4_5_r4 == 2), (d_4_6_2_r4 == 1), (d_4_6_2_r4 == 0)))
s.add(If(And(A_4_5_r3 == 1, A_3_5_r3 + A_4_6_r3 == 2), (d_4_5_2_r3 == 1), (d_4_5_2_r3 == 0)))
s.add(If(And(A_3_5_r3 == 1, A_3_6_r3 + A_4_5_r3 == 2), (d_3_5_2_r3 == 1), (d_3_5_2_r3 == 0)))
s.add(If(And(A_3_6_r3 == 1, A_4_6_r3 + A_3_5_r3 == 2), (d_3_6_2_r3 == 1), (d_3_6_2_r3 == 0)))
s.add(If(And(A_4_6_r3 == 1, A_3_6_r3 + A_4_5_r3 == 2), (d_4_6_2_r3 == 1), (d_4_6_2_r3 == 0)))

s.add(d_4_5_0_r1 + d_3_5_0_r1 + d_3_6_0_r1 + d_4_6_0_r1 == d_0_r1)
s.add(d_4_5_1_r1 + d_3_5_1_r1 + d_3_6_1_r1 + d_4_6_1_r1 == d_1_r1)
s.add(d_4_5_2_r1 + d_3_5_2_r1 + d_3_6_2_r1 + d_4_6_2_r1 == d_2_r1)
s.add(d_4_5_0_r4 + d_3_5_0_r4 + d_3_6_0_r4 + d_4_6_0_r4 == d_0_r4)
s.add(d_4_5_1_r4 + d_3_5_1_r4 + d_3_6_1_r4 + d_4_6_1_r4 == d_1_r4)
s.add(d_4_5_2_r4 + d_3_5_2_r4 + d_3_6_2_r4 + d_4_6_2_r4 == d_2_r4)
s.add(d_4_5_0_r3 + d_3_5_0_r3 + d_3_6_0_r3 + d_4_6_0_r3 == d_0_r3)
s.add(d_4_5_1_r3 + d_3_5_1_r3 + d_3_6_1_r3 + d_4_6_1_r3 == d_1_r3)
s.add(d_4_5_2_r3 + d_3_5_2_r3 + d_3_6_2_r3 + d_4_6_2_r3 == d_2_r3)

s.add(Implies(V_r1 == 1, And(d_0_r1 == 1, d_1_r1 == 0, d_2_r1 == 0)))
s.add(Implies(V_r1 == 2, And(d_0_r1 == 0, d_1_r1 == 2, d_2_r1 == 0)))
s.add(Implies(V_r1 == 3, And(d_0_r1 == 0, d_1_r1 == 2, d_2_r1 == 1)))
s.add(Implies(V_r1 == 4, And(d_0_r1 == 0, d_1_r1 == 0, d_2_r1 == 4)))
s.add(Implies(V_r4 == 1, And(d_0_r4 == 1, d_1_r4 == 0, d_2_r4 == 0)))
s.add(Implies(V_r4 == 2, And(d_0_r4 == 0, d_1_r4 == 2, d_2_r4 == 0)))
s.add(Implies(V_r4 == 3, And(d_0_r4 == 0, d_1_r4 == 2, d_2_r4 == 1)))
s.add(Implies(V_r4 == 4, And(d_0_r4 == 0, d_1_r4 == 0, d_2_r4 == 4)))
s.add(Implies(V_r3 == 1, And(d_0_r3 == 1, d_1_r3 == 0, d_2_r3 == 0)))
s.add(Implies(V_r3 == 2, And(d_0_r3 == 0, d_1_r3 == 2, d_2_r3 == 0)))
s.add(Implies(V_r3 == 3, And(d_0_r3 == 0, d_1_r3 == 2, d_2_r3 == 1)))
s.add(Implies(V_r3 == 4, And(d_0_r3 == 0, d_1_r3 == 0, d_2_r3 == 4)))

s.add(And(V_r1 == 1, V_r4 == 1, V_r3 == 2))

if s.check() == unsat:
	print("Not possible to create traceable graph for all reagents")
else:
	fp = open('output0.txt','w')
	values = s.model()
	if values[A_4_5_r1] == 1:
		fp.write("4,5,r1\n")
	if values[A_4_5_r4] == 1:
		fp.write("4,5,r4\n")
	if values[A_4_5_r3] == 1:
		fp.write("4,5,r3\n")
	if values[A_3_5_r1] == 1:
		fp.write("3,5,r1\n")
	if values[A_3_5_r4] == 1:
		fp.write("3,5,r4\n")
	if values[A_3_5_r3] == 1:
		fp.write("3,5,r3\n")
	if values[A_3_6_r1] == 1:
		fp.write("3,6,r1\n")
	if values[A_3_6_r4] == 1:
		fp.write("3,6,r4\n")
	if values[A_3_6_r3] == 1:
		fp.write("3,6,r3\n")
	if values[A_4_6_r1] == 1:
		fp.write("4,6,r1\n")
	if values[A_4_6_r4] == 1:
		fp.write("4,6,r4\n")
	if values[A_4_6_r3] == 1:
		fp.write("4,6,r3\n")
